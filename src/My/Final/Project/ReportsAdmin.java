/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.FinalProject;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JOptionPane;
import java.sql.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LiamBrady
 */
public class ReportsAdmin extends javax.swing.JFrame {

    /**
     * Creates new form ReportsAdmin
     */
    public ReportsAdmin() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButtonShowAllStudents = new javax.swing.JButton();
        jButtonShowAllTeachers = new javax.swing.JButton();
        jButtonSearchByWord = new javax.swing.JButton();
        jButtonLogout = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Reports Admin Menu");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jButtonShowAllStudents.setBackground(new java.awt.Color(242, 242, 242));
        jButtonShowAllStudents.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonShowAllStudents.setText("Show All Students");
        jButtonShowAllStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowAllStudentsActionPerformed(evt);
            }
        });

        jButtonShowAllTeachers.setBackground(new java.awt.Color(242, 242, 242));
        jButtonShowAllTeachers.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonShowAllTeachers.setText("Show All Teachers");
        jButtonShowAllTeachers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowAllTeachersActionPerformed(evt);
            }
        });

        jButtonSearchByWord.setBackground(new java.awt.Color(242, 242, 242));
        jButtonSearchByWord.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonSearchByWord.setText("Search By Word");
        jButtonSearchByWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchByWordActionPerformed(evt);
            }
        });

        jButtonLogout.setBackground(new java.awt.Color(242, 242, 242));
        jButtonLogout.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonLogout.setText("LOGOUT");
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButtonShowAllStudents, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonShowAllTeachers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonSearchByWord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jButtonShowAllStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonShowAllTeachers, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonSearchByWord, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Surname", "Course", "Class", "Email", "Eircode"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1329, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonShowAllStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowAllStudentsActionPerformed
        // 1) Database connection info
        String url = "jdbc:mysql://localhost:3306/gtirecords";
        String user = "root";
        String password = "root";

        // 2) SQL query:
        //    - We select these columns from the student table:
        //        studentID, firstName, surname, email, phoneNumber,
        //        DOB, address1, address2, PPSN, Eircode, County, classGroupCode
        //    - We order the results by studentID so they come back in numeric order.
        String sql
                = "SELECT studentID, firstName, surname, email, phoneNumber, "
                + "DOB, address1, address2, PPSN, Eircode, County, classGroupCode "
                + "FROM student "
                + "ORDER BY studentID";

        // 3) Execute the query and fill a table model
        try (
                Connection con = DriverManager.getConnection(url, user, password); PreparedStatement pst = con.prepareStatement(sql); ResultSet rs = pst.executeQuery()) {
            // 4) Create a fresh table model with the column names
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID");           // studentID
            model.addColumn("First Name");   // firstName
            model.addColumn("Surname");      // surname
            model.addColumn("Email");        // email
            model.addColumn("Phone");        // phoneNumber
            model.addColumn("DOB");          // date of birth
            model.addColumn("Address1");     // address1
            model.addColumn("Address2");     // address2
            model.addColumn("PPSN");         // personal public service number
            model.addColumn("Eircode");      // postal code
            model.addColumn("County");       // county
            model.addColumn("Class Group");  // classGroupCode

            // 5) Loop through each row returned by the database
            while (rs.next()) {
                Object[] row = new Object[12];
                row[0] = rs.getInt("studentID");       // unique numeric ID
                row[1] = rs.getString("firstName");       // given name
                row[2] = rs.getString("surname");         // family name
                row[3] = rs.getString("email");           // contact email
                row[4] = rs.getString("phoneNumber");     // contact phone
                row[5] = rs.getString("DOB");             // date of birth
                row[6] = rs.getString("address1");        // address line 1
                row[7] = rs.getString("address2");        // address line 2
                row[8] = rs.getString("PPSN");            // PPS number
                row[9] = rs.getString("Eircode");         // postal code
                row[10] = rs.getString("County");          // county name
                row[11] = rs.getString("classGroupCode");  // class group code
                model.addRow(row);                         // add this row to the model
            }

            // 6) Apply the model to our JTable to display all rows
            jTable.setModel(model);

        } catch (SQLException e) {
            // 7) If anything goes wrong, print stack trace and show error
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButtonShowAllStudentsActionPerformed

    private void jButtonShowAllTeachersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowAllTeachersActionPerformed
        // 1) database connection settings
        String url = "jdbc:mysql://localhost:3306/gtirecords"; // JDBC URL for our schema
        String user = "root";                                  // DB username
        String password = "root";                                  // DB password

        // 2) SQL query to list every teacher record:
        //    - select these columns directly from the teacher table:
        //        teacherID, firstName, surname, email, login, PPSN, DOB,
        //        address1, address2, County, Eircode, PhoneNumber
        //    - order results by teacherID ascending
        String sql
                = "SELECT teacherID, firstName, surname, email, login, PPSN, DOB, "
                + "address1, address2, County, Eircode, PhoneNumber "
                + "FROM teacher "
                + "ORDER BY teacherID";

        // 3) execute query and build table model
        try (
                Connection con = DriverManager.getConnection(url, user, password); PreparedStatement pst = con.prepareStatement(sql); ResultSet rs = pst.executeQuery()) {
            // 4) create a new table model and define its columns
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID");           // teacherID
            model.addColumn("First Name");   // firstName
            model.addColumn("Surname");      // surname
            model.addColumn("Email");        // email
            model.addColumn("Login");        // login
            model.addColumn("PPSN");         // personal public service number
            model.addColumn("DOB");          // date of birth
            model.addColumn("Address1");     // address line 1
            model.addColumn("Address2");     // address line 2
            model.addColumn("County");       // county
            model.addColumn("Eircode");      // postal code
            model.addColumn("Phone");        // phone number

            // 5) loop through each result row
            while (rs.next()) {
                Object[] row = new Object[12];
                row[0] = rs.getInt("teacherID");    // unique numeric ID
                row[1] = rs.getString("firstName");    // first name
                row[2] = rs.getString("surname");      // last name
                row[3] = rs.getString("email");        // email address
                row[4] = rs.getString("login");        // login username
                row[5] = rs.getString("PPSN");         // PPS number
                row[6] = rs.getString("DOB");          // date of birth
                row[7] = rs.getString("address1");     // address line 1
                row[8] = rs.getString("address2");     // address line 2
                row[9] = rs.getString("County");       // county
                row[10] = rs.getString("Eircode");      // Eircode
                row[11] = rs.getString("PhoneNumber");  // phone number
                model.addRow(row);                      // add row to the model
            }

            // 6) set the JTable’s model to display all teachers
            jTable.setModel(model);

        } catch (SQLException e) {
            // 7) if something goes wrong, print stack and show dialog
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButtonShowAllTeachersActionPerformed

    private void jButtonSearchByWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchByWordActionPerformed
        int choice = JOptionPane.showConfirmDialog( // Ask for option
                this,
                "Search STUDENTS? (Yes) or TEACHERS? (No)",
                "Search by keyword",
                JOptionPane.YES_NO_OPTION
        );
        if (choice == JOptionPane.CLOSED_OPTION) {
            return;
        }
        boolean searchStudents = (choice == JOptionPane.YES_OPTION);

        // 2) Prompt for the word
        String word = JOptionPane.showInputDialog(this, "Enter keyword to search:");
        if (word == null || word.trim().isEmpty()) {
            return;
        }
        String pattern = "%" + word.trim() + "%";

        // 3) SQL query and table model depending on choice
        if (searchStudents) {
            // STUDENT query: show ID, Name, Surname, Course, Class, Email, Eircode
            String sql
                    = "SELECT student.studentID, student.firstName, student.surname, "
                    + "course.courseName, classGroup.classGroupCode, "
                    + "student.email, student.Eircode "
                    + "FROM student "
                    + "  INNER JOIN classGroup "
                    + "    ON student.classGroupCode = classGroup.classGroupCode "
                    + "  INNER JOIN course "
                    + "    ON classGroup.courseCode = course.courseCode "
                    + "WHERE student.firstName LIKE ? "
                    + "   OR student.surname   LIKE ? "
                    + "   OR student.email     LIKE ? "
                    + "   OR course.courseName LIKE ? "
                    + "   OR classGroup.classGroupCode LIKE ? "
                    + "   OR student.Eircode   LIKE ? "
                    + "ORDER BY student.studentID";
            try (
                    Connection con = DriverManager.getConnection(
                            "jdbc:mysql://localhost:3306/gtirecords", "root", "root"); PreparedStatement pst = con.prepareStatement(sql)) {
                // bind 6 placeholders
                for (int i = 1; i <= 6; i++) {
                    pst.setString(i, pattern);
                }
                ResultSet rs = pst.executeQuery();

                DefaultTableModel m = new DefaultTableModel();
                m.addColumn("Student ID");
                m.addColumn("Name");
                m.addColumn("Surname");
                m.addColumn("Course");
                m.addColumn("Class");
                m.addColumn("Email");
                m.addColumn("Eircode");

                while (rs.next()) {
                    m.addRow(new Object[]{
                        rs.getInt("studentID"),
                        rs.getString("firstName"),
                        rs.getString("surname"),
                        rs.getString("courseName"),
                        rs.getString("classGroupCode"),
                        rs.getString("email"),
                        rs.getString("Eircode")
                    });
                }
                jTable.setModel(m);
                rs.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this,
                        "Error searching students:\n" + e.getMessage(),
                        "DB Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // TEACHER query: show ID, First Name, Surname, Email, Login
            String sql
                    = "SELECT teacherID, firstName, surname, email, login "
                    + "FROM teacher "
                    + "WHERE firstName LIKE ? "
                    + "   OR surname   LIKE ? "
                    + "   OR email     LIKE ? "
                    + "   OR login     LIKE ? "
                    + "ORDER BY teacherID";
            try (
                    Connection con = DriverManager.getConnection(
                            "jdbc:mysql://localhost:3306/gtirecords", "root", "root"); PreparedStatement pst = con.prepareStatement(sql)) {
                // bind 4 placeholders
                for (int i = 1; i <= 4; i++) {
                    pst.setString(i, pattern);
                }
                ResultSet rs = pst.executeQuery();

                DefaultTableModel m = new DefaultTableModel();
                m.addColumn("ID");
                m.addColumn("First Name");
                m.addColumn("Surname");
                m.addColumn("Email");
                m.addColumn("Login");

                while (rs.next()) {
                    m.addRow(new Object[]{
                        rs.getInt("teacherID"),
                        rs.getString("firstName"),
                        rs.getString("surname"),
                        rs.getString("email"),
                        rs.getString("login")
                    });
                }
                jTable.setModel(m);
                rs.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this,
                        "Error searching teachers:\n" + e.getMessage(),
                        "DB Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonSearchByWordActionPerformed

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed
        int response = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to log out?",
                "Log Out Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        if (response == JOptionPane.YES_OPTION) {
            Login f = new Login();
            f.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_jButtonLogoutActionPerformed

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        if (evt.getClickCount() != 2) {
            return;
        }

        int row = jTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this,
                    "Please select a record to print.",
                    "Print Error",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        // pull ID, first name and surname from the selected row
        String recordId = jTable.getValueAt(row, 0).toString();
        String firstName = jTable.getValueAt(row, 1).toString();
        String surname = jTable.getValueAt(row, 2).toString();
        int id = Integer.parseInt(recordId);

        try (Connection con = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/gtirecords", "root", "root")) {

            // 1) check if this record is a teacher
            String checkTeacherQuery
                    = "SELECT * FROM teacher "
                    + "WHERE teacherID = ? AND firstName = ? AND surname = ?";
            try (PreparedStatement chk = con.prepareStatement(checkTeacherQuery)) {
                chk.setInt(1, id);
                chk.setString(2, firstName);
                chk.setString(3, surname);
                try (ResultSet rs = chk.executeQuery()) {
                    if (rs.next()) {
                        JOptionPane.showMessageDialog(this,
                                "Cannot print an academic record for a teacher.",
                                "Print Error",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }

            // 2) confirm printing
            int resp = JOptionPane.showConfirmDialog(this,
                    "Print academic record for " + firstName + " " + surname + "?",
                    "Confirm Print",
                    JOptionPane.YES_NO_OPTION);
            if (resp != JOptionPane.YES_OPTION) {
                return;
            }

            // 3) fetch student details
            String studSql = "SELECT * FROM student WHERE studentID = ?";
            String email = "", phone = "", dob = "", addr1 = "", addr2 = "", ppsn = "", eir = "", county = "", cls = "";
            try (PreparedStatement pst = con.prepareStatement(studSql)) {
                pst.setInt(1, id);
                try (ResultSet rs = pst.executeQuery()) {
                    if (rs.next()) {
                        email = rs.getString("email");
                        phone = rs.getString("phoneNumber");
                        dob = rs.getString("DOB");
                        addr1 = rs.getString("address1");
                        addr2 = rs.getString("address2");
                        ppsn = rs.getString("PPSN");
                        eir = rs.getString("Eircode");
                        county = rs.getString("County");
                        cls = rs.getString("classGroupCode");
                    }
                }
            }

            // 4) prepare output file
            File folder = new File("AcademicRecords");
            if (!folder.exists()) {
                folder.mkdirs();
            }
            File outFile = new File(folder, surname + "_" + id + ".txt");

            try (PrintWriter out = new PrintWriter(outFile)) {
                // header: student info
                out.println("STUDENT INFORMATION");
                out.println("===================");
                out.println("ID          : " + recordId);
                out.println("Name        : " + firstName + " " + surname);
                out.println("Email       : " + email);
                out.println("Phone       : " + phone);
                out.println("DOB         : " + dob);
                out.println("Address 1   : " + addr1);
                out.println("Address 2   : " + addr2);
                out.println("PPSN        : " + ppsn);
                out.println("Eircode     : " + eir);
                out.println("County      : " + county);
                out.println("Class Group : " + cls);
                out.println();

                // header: module grades
                out.println("MODULE GRADES");
                out.println("=============");
                out.printf("%-10s  %-20s  %3s  %3s  %3s  %-12s%n",
                        "Code", "Module Name", "A1", "A2", "Exm", "Award");

                // 5) fetch and print each module & grade
                String gradesSql
                        = "SELECT ma.moduleCode, m.moduleName, "
                        + "       ma.assessment_1_marks, ma.assessment_2_marks, "
                        + "       ma.exam_marks, ma.award "
                        + "FROM module_assessment ma "
                        + "INNER JOIN module m ON ma.moduleCode = m.moduleCode "
                        + "WHERE ma.studentID = ?";
                try (PreparedStatement pst2 = con.prepareStatement(gradesSql)) {
                    pst2.setInt(1, id);
                    try (ResultSet rs2 = pst2.executeQuery()) {
                        while (rs2.next()) {
                            String code = rs2.getString("moduleCode");
                            String name = rs2.getString("moduleName");
                            int a1 = rs2.getInt("assessment_1_marks");
                            int a2 = rs2.getInt("assessment_2_marks");
                            int exm = rs2.getInt("exam_marks");
                            String aw = rs2.getString("award");
                            out.printf("%-10s  %-20s  %3d  %3d  %3d  %-12s%n",
                                    code, name, a1, a2, exm, aw);
                        }
                    }
                }
            }

            // 6) done
            JOptionPane.showMessageDialog(this,
                    "Academic record saved to:\n" + outFile.getAbsolutePath(),
                    "Print Successful",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Error: " + ex.getMessage(),
                    "Print Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jTableMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        jTable.setDefaultEditor(Object.class, null);
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReportsAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReportsAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReportsAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReportsAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReportsAdmin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JButton jButtonSearchByWord;
    private javax.swing.JButton jButtonShowAllStudents;
    private javax.swing.JButton jButtonShowAllTeachers;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables
}
