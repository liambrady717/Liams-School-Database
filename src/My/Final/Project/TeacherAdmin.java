/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.FinalProject;

import javax.swing.JOptionPane;
import java.sql.*;

/**
 *
 * @author LiamBrady
 */
public class TeacherAdmin extends javax.swing.JFrame {

    private String originalTeacherLogin = "";

    private void populateComboBoxes() {
        try (Connection con = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/gtirecords", "root", "root"); Statement st = con.createStatement(); ResultSet rsCourse = st.executeQuery("SELECT courseCode FROM course")) {

            jComboBoxCourse.removeAllItems();
            while (rsCourse.next()) {
                jComboBoxCourse.addItem(rsCourse.getString("courseCode"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                    this, e.getMessage());
        }
    }

    /**
     * Creates new form TeacherAdmin
     */
    public TeacherAdmin() {
        initComponents();
        jTextFieldFName.setEditable(false);
        jTextFieldSurname.setEditable(false);
        jTextFieldEmail.setEditable(false);
        jTextFieldPhoneNumber.setEditable(false);
        jTextFieldDOB.setEditable(false);
        jTextFieldAddLine1.setEditable(false);
        jTextFieldAddLine2.setEditable(false);
        jTextFieldPPSN.setEditable(false);
        jTextFieldEircode.setEditable(false);
        jTextFieldCounty.setEditable(false);
        jComboBoxCourse.setEnabled(false);
        jComboBoxModule.setEnabled(false);
        jButtonAddTeacher.setVisible(false);
        jTextFieldPassword.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextFieldSurname = new javax.swing.JTextField();
        jTextFieldEmail = new javax.swing.JTextField();
        jLabelCounty = new javax.swing.JLabel();
        jLabelCourse = new javax.swing.JLabel();
        jTextFieldCounty = new javax.swing.JTextField();
        jComboBoxCourse = new javax.swing.JComboBox<>();
        jLabelAddLine2 = new javax.swing.JLabel();
        jLabelClassGroup = new javax.swing.JLabel();
        jLabelEircode = new javax.swing.JLabel();
        jComboBoxModule = new javax.swing.JComboBox<>();
        jLabelSurname = new javax.swing.JLabel();
        jLabelEmail = new javax.swing.JLabel();
        jTextFieldPhoneNumber = new javax.swing.JTextField();
        jLabelPhoneNumber = new javax.swing.JLabel();
        jLabelAddLine1 = new javax.swing.JLabel();
        jLabelFName = new javax.swing.JLabel();
        jLabelPPSN = new javax.swing.JLabel();
        jLabelDOB = new javax.swing.JLabel();
        jTextFieldDOB = new javax.swing.JTextField();
        jTextFieldEircode = new javax.swing.JTextField();
        jTextFieldPPSN = new javax.swing.JTextField();
        jTextFieldFName = new javax.swing.JTextField();
        jTextFieldAddLine1 = new javax.swing.JTextField();
        jTextFieldAddLine2 = new javax.swing.JTextField();
        jTextFieldTeacherID = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonLogout = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButtonConfirm = new javax.swing.JButton();
        jButtonAddTeacher = new javax.swing.JButton();
        jLabelTeacherID = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldPassword = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Teacher Admin Menu");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setToolTipText("");

        jTextFieldSurname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSurnameActionPerformed(evt);
            }
        });
        jTextFieldSurname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldSurnameKeyTyped(evt);
            }
        });

        jTextFieldEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldEmailKeyTyped(evt);
            }
        });

        jLabelCounty.setText("County :");

        jLabelCourse.setText("Course :");

        jTextFieldCounty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCountyActionPerformed(evt);
            }
        });
        jTextFieldCounty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldCountyKeyTyped(evt);
            }
        });

        jComboBoxCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course" }));
        jComboBoxCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCourseActionPerformed(evt);
            }
        });

        jLabelAddLine2.setText("Address Line 2 :");

        jLabelClassGroup.setText("Module:");

        jLabelEircode.setText("Eircode :");

        jComboBoxModule.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Module" }));

        jLabelSurname.setText("Surname :");

        jLabelEmail.setText("Email :");

        jTextFieldPhoneNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPhoneNumberKeyTyped(evt);
            }
        });

        jLabelPhoneNumber.setText("Phone Number :");

        jLabelAddLine1.setText("Address Line 1 :");

        jLabelFName.setText("First Name :");

        jLabelPPSN.setText("PPSN :");

        jLabelDOB.setText("Date of birth :");

        jTextFieldDOB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldDOBKeyTyped(evt);
            }
        });

        jTextFieldEircode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldEircodeActionPerformed(evt);
            }
        });
        jTextFieldEircode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldEircodeKeyTyped(evt);
            }
        });

        jTextFieldPPSN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPPSNKeyTyped(evt);
            }
        });

        jTextFieldFName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldFNameActionPerformed(evt);
            }
        });
        jTextFieldFName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldFNameKeyTyped(evt);
            }
        });

        jTextFieldAddLine1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldAddLine1KeyTyped(evt);
            }
        });

        jTextFieldAddLine2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldAddLine2KeyTyped(evt);
            }
        });

        jTextFieldTeacherID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextFieldTeacherID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldTeacherIDMouseClicked(evt);
            }
        });
        jTextFieldTeacherID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldTeacherIDKeyTyped(evt);
            }
        });

        jButtonSearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonSearch.setText("SEARCH");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jButtonAdd.setBackground(new java.awt.Color(242, 242, 242));
        jButtonAdd.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonAdd.setText("ADD");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonUpdate.setBackground(new java.awt.Color(242, 242, 242));
        jButtonUpdate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonUpdate.setText("UPDATE");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonDelete.setBackground(new java.awt.Color(242, 242, 242));
        jButtonDelete.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonDelete.setText("DELETE");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonLogout.setBackground(new java.awt.Color(242, 242, 242));
        jButtonLogout.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonLogout.setText("LOGOUT");
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButtonAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonLogout, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jButtonCancel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonConfirm.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonConfirm.setText("Confirm");
        jButtonConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmActionPerformed(evt);
            }
        });

        jButtonAddTeacher.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonAddTeacher.setText("Add Teacher");
        jButtonAddTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddTeacherActionPerformed(evt);
            }
        });

        jLabelTeacherID.setText("Teacher ID:");

        jLabel2.setText("Password:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelCounty, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelCourse, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabelPPSN, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelFName, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabelEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabelPhoneNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabelAddLine1)
                                    .addComponent(jLabelAddLine2)
                                    .addComponent(jLabelEircode, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelTeacherID))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldTeacherID, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldDOB, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldSurname)
                                    .addComponent(jTextFieldPPSN)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jTextFieldCounty, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jTextFieldFName, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                                                .addComponent(jTextFieldEmail)
                                                .addComponent(jTextFieldPhoneNumber)
                                                .addComponent(jTextFieldAddLine1)
                                                .addComponent(jTextFieldAddLine2)
                                                .addComponent(jTextFieldEircode))
                                            .addComponent(jComboBoxCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelClassGroup)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBoxModule, 0, 233, Short.MAX_VALUE)
                                    .addComponent(jTextFieldPassword))))
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSearch))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonAddTeacher)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCancel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonConfirm)))
                .addGap(39, 39, 39))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTeacherID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch)
                    .addComponent(jLabelTeacherID))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFName))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSurname))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPPSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPPSN))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDOB))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEmail))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPhoneNumber))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldAddLine1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAddLine1))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldAddLine2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAddLine2))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldEircode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEircode))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCounty)
                    .addComponent(jTextFieldCounty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCourse))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxModule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelClassGroup))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonConfirm)
                    .addComponent(jButtonAddTeacher))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldSurnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSurnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSurnameActionPerformed

    private void jTextFieldCountyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCountyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCountyActionPerformed

    private void jComboBoxCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCourseActionPerformed
        String selectedCourse = (String) jComboBoxCourse.getSelectedItem();
        if (selectedCourse == null) {
            return;
        }

        try (Connection con = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/gtirecords", "root", "root"); PreparedStatement pst = con.prepareStatement(
                        "SELECT moduleCode FROM module WHERE courseCode = ?")) {

            pst.setString(1, selectedCourse);
            try (ResultSet rs = pst.executeQuery()) {
                jComboBoxModule.removeAllItems();
                while (rs.next()) {
                    jComboBoxModule.addItem(rs.getString("moduleCode"));
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    this, ex.getMessage());
        }
    }//GEN-LAST:event_jComboBoxCourseActionPerformed

    private void jTextFieldEircodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldEircodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldEircodeActionPerformed

    private void jTextFieldFNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldFNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldFNameActionPerformed

    private void jTextFieldTeacherIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldTeacherIDMouseClicked

    }//GEN-LAST:event_jTextFieldTeacherIDMouseClicked

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // 1) get the ID text from the field
        String teacherIDText = jTextFieldTeacherID.getText().trim();
        // 2) if no ID was entered, tell the user and stop
        if (teacherIDText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Teacher ID");
            return;
        }

        try {
            // 3) turn the text into a number
            int teacherID = Integer.parseInt(teacherIDText);
            // 4) open a connection to the database
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/gtirecords", "root", "root"
            );

            // 5) load the teacher’s basic info
            PreparedStatement pst = con.prepareStatement(
                    "SELECT firstName, surname, email, PPSN, DOB, address1, address2, County, Eircode, PhoneNumber "
                    + "FROM teacher WHERE teacherID = ?"
            );
            pst.setInt(1, teacherID);
            ResultSet rs = pst.executeQuery();

            // 6) if no teacher found, clear fields, tell user, close and stop
            if (!rs.next()) {
                jTextFieldFName.setText("");
                jTextFieldSurname.setText("");
                jTextFieldEmail.setText("");
                jTextFieldPassword.setText("");
                jTextFieldPPSN.setText("");
                jTextFieldDOB.setText("");
                jTextFieldAddLine1.setText("");
                jTextFieldAddLine2.setText("");
                jTextFieldEircode.setText("");
                jTextFieldCounty.setText("");
                jTextFieldPhoneNumber.setText("");
                jComboBoxCourse.setSelectedIndex(-1);
                jComboBoxModule.setSelectedIndex(-1);

                JOptionPane.showMessageDialog(this,
                        "No teacher found with ID: " + teacherID
                );
                rs.close();
                pst.close();
                con.close();
                return;
            }

            // 7) fill the text fields with the data we got
            String email = rs.getString("email");
            jTextFieldFName.setText(rs.getString("firstName"));
            jTextFieldSurname.setText(rs.getString("surname"));
            jTextFieldEmail.setText(email);
            jTextFieldPPSN.setText(rs.getString("PPSN"));
            jTextFieldDOB.setText(rs.getString("DOB"));
            jTextFieldAddLine1.setText(rs.getString("address1"));
            jTextFieldAddLine2.setText(rs.getString("address2"));
            jTextFieldEircode.setText(rs.getString("Eircode"));
            jTextFieldCounty.setText(rs.getString("County"));
            jTextFieldPhoneNumber.setText(rs.getString("PhoneNumber"));

            rs.close();
            pst.close();

            // 8) now load the password for this login
            PreparedStatement pstPwd = con.prepareStatement(
                    "SELECT password FROM login WHERE login = ?"
            );
            pstPwd.setString(1, email);
            ResultSet rsPwd = pstPwd.executeQuery();
            if (rsPwd.next()) {
                jTextFieldPassword.setText(rsPwd.getString("password"));
            } else {
                jTextFieldPassword.setText("");
            }
            rsPwd.close();
            pstPwd.close();

            // 9) refill the course and module dropdowns
            populateComboBoxes();

            // 10) find which module this teacher has
            String assignedModule = null;
            pst = con.prepareStatement(
                    "SELECT moduleCode FROM teacher_module WHERE teacherID = ?"
            );
            pst.setInt(1, teacherID);
            rs = pst.executeQuery();
            if (rs.next()) {
                assignedModule = rs.getString("moduleCode");
            }
            rs.close();
            pst.close();

            // 11) if we got a module, find its course
            String assignedCourse = null;
            if (assignedModule != null) {
                pst = con.prepareStatement(
                        "SELECT courseCode FROM module WHERE moduleCode = ?"
                );
                pst.setString(1, assignedModule);
                rs = pst.executeQuery();
                if (rs.next()) {
                    assignedCourse = rs.getString("courseCode");
                }
                rs.close();
                pst.close();
            }

            // 12) put the course and module into the dropdowns
            if (assignedCourse != null) {
                jComboBoxCourse.setSelectedItem(assignedCourse);

                pst = con.prepareStatement(
                        "SELECT moduleCode FROM module WHERE courseCode = ?"
                );
                pst.setString(1, assignedCourse);
                rs = pst.executeQuery();
                jComboBoxModule.removeAllItems();
                while (rs.next()) {
                    jComboBoxModule.addItem(rs.getString("moduleCode"));
                }
                rs.close();
                pst.close();

                jComboBoxModule.setSelectedItem(assignedModule);
            }

            // 13) tell the user we found the teacher
            JOptionPane.showMessageDialog(this, "Teacher found");
            con.close();

        } catch (Exception e) {
            // 14) show any error
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // 1) Ask the user if they want to type in their own ID
        int choice = JOptionPane.showConfirmDialog(
                this,
                "Do you want to assign a custom Teacher ID?",
                "Teacher ID",
                JOptionPane.YES_NO_OPTION
        );

        int teacherID;

        if (choice == JOptionPane.YES_OPTION) {
            // 2a) User chose custom: prompt for the ID
            String custom = JOptionPane.showInputDialog(
                    this,
                    "Enter Teacher ID (1–600):",
                    "Custom ID",
                    JOptionPane.QUESTION_MESSAGE
            );
            try {
                teacherID = Integer.parseInt(custom);
                // 2b) Validate the number is in range
                if (teacherID < 1 || teacherID > 600) {
                    JOptionPane.showMessageDialog(this, "ID must be between 1 and 600");
                    return;
                }
            } catch (Exception ex) {
                // 2c) Not a valid number
                JOptionPane.showMessageDialog(this, "Please enter a valid number");
                return;
            }
        } else {
            // 3) User chose auto-generate: find the current max and add 1
            try (
                    Connection c = DriverManager.getConnection(
                            "jdbc:mysql://localhost:3306/gtirecords", "root", "root"
                    ); Statement s = c.createStatement(); ResultSet r = s.executeQuery("SELECT MAX(teacherID) AS maxID FROM teacher")) {
                        if (r.next()) {
                            teacherID = r.getInt("maxID") + 1;
                            // 3b) check we didn’t go past 600
                            if (teacherID > 600) {
                                JOptionPane.showMessageDialog(this, "Maximum ID reached");
                                return;
                            }
                        } else {
                            // no teachers yet: start at 1
                            teacherID = 1;
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Error generating ID: " + ex.getMessage());
                        return;
                    }
        }

        // 4) Lock the ID field so it can’t be changed again
        jTextFieldTeacherID.setText(String.valueOf(teacherID));
        jTextFieldTeacherID.setEditable(false);

        // 5) Turn on all the data fields so user can fill them in
        jTextFieldFName.setEditable(true);
        jTextFieldSurname.setEditable(true);
        jTextFieldEmail.setEditable(true);
        jTextFieldPassword.setEditable(true);
        jTextFieldPhoneNumber.setEditable(true);
        jTextFieldDOB.setEditable(true);
        jTextFieldAddLine1.setEditable(true);
        jTextFieldAddLine2.setEditable(true);
        jTextFieldPPSN.setEditable(true);
        jTextFieldEircode.setEditable(true);
        jTextFieldCounty.setEditable(true);
        jComboBoxCourse.setEnabled(true);
        jComboBoxModule.setEnabled(true);

        jTextFieldFName.setText("");
        jTextFieldSurname.setText("");
        jTextFieldEmail.setText("");
        jTextFieldPhoneNumber.setText("");
        jTextFieldDOB.setText("");
        jTextFieldAddLine1.setText("");
        jTextFieldAddLine2.setText("");
        jTextFieldPPSN.setText("");
        jTextFieldEircode.setText("");
        jTextFieldCounty.setText("");
        jTextFieldPassword.setText("");

        // 6) Hide the Confirm button and show the Add-Teacher button
        jButtonConfirm.setVisible(false);
        jButtonAddTeacher.setVisible(true);

        // 7) Fill the course & module dropdowns
        populateComboBoxes();

        // 8) Tell the user what to do next
        JOptionPane.showMessageDialog(
                this,
                "Teacher ID " + teacherID + " assigned.\n"
                + "Fill in the details and click 'Add Teacher'."
        );

    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // 1) get the text from the Teacher ID field
        String teacherIDText = jTextFieldTeacherID.getText().trim();
        // 2) if it’s empty, show a message and stop
        if (teacherIDText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Teacher ID");
            return;
        }

        try (Connection con = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/gtirecords", "root", "root")) {

            int teacherID = Integer.parseInt(teacherIDText);

            // 3) load teacher info plus their module and course
            String sql
                    = "SELECT teacher.*, teacher_module.moduleCode, module.courseCode, course.courseName "
                    + "FROM teacher "
                    + "LEFT JOIN teacher_module ON teacher.teacherID = teacher_module.teacherID "
                    + "LEFT JOIN module ON teacher_module.moduleCode = module.moduleCode "
                    + "LEFT JOIN course ON module.courseCode = course.courseCode "
                    + "WHERE teacher.teacherID = ?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setInt(1, teacherID);
            ResultSet rs = pst.executeQuery();
            // 4) if no record, show message and stop
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this,
                        "No teacher found with ID: " + teacherID);
                return;
            }

            // 5) read the fields from the result
            String firstName = rs.getString("firstName");
            String surname = rs.getString("surname");
            String email = rs.getString("email");
            String login = rs.getString("login");  // current login
            originalTeacherLogin = login;              // save it
            String ppsn = rs.getString("PPSN");
            String dob = rs.getString("DOB");
            String add1 = rs.getString("address1");
            String add2 = rs.getString("address2");
            String county = rs.getString("County");
            String eircode = rs.getString("Eircode");
            String phone = rs.getString("PhoneNumber");
            String moduleCode = rs.getString("moduleCode");
            String courseCode = rs.getString("courseCode");
            String courseName = rs.getString("courseName");
            rs.close();
            pst.close();

            // 6) load the password for this login
            String password = "";
            try (PreparedStatement pp = con.prepareStatement(
                    "SELECT password FROM login WHERE login = ?")) {
                pp.setString(1, login);
                try (ResultSet pr = pp.executeQuery()) {
                    if (pr.next()) {
                        password = pr.getString("password");
                    }
                }
            }

            // 7) ask user to confirm update
            String msg
                    = "Teacher Found:\n"
                    + "Name:   " + firstName + " " + surname + "\n"
                    + "Email:  " + email + "\n"
                    + "Login:  " + login + "\n";
            if (courseCode != null && moduleCode != null) {
                msg += "Course: " + courseName + "\n"
                        + "Module: " + moduleCode;
            } else {
                msg += "No course or module assigned";
            }
            msg += "\n\nDo you want to update this teacher?";
            if (JOptionPane.showConfirmDialog(
                    this, msg, "Confirm Update", JOptionPane.YES_NO_OPTION)
                    != JOptionPane.YES_OPTION) {
                return;
            }

            // 8) fill the course dropdown
            try (Statement st = con.createStatement(); ResultSet rc = st.executeQuery("SELECT courseCode FROM course")) {
                jComboBoxCourse.removeAllItems();
                while (rc.next()) {
                    jComboBoxCourse.addItem(rc.getString("courseCode"));
                }
                if (courseCode != null) {
                    jComboBoxCourse.setSelectedItem(courseCode);
                }
            }

            // 9) fill the module dropdown if we have a course
            if (courseCode != null) {
                try (PreparedStatement pm = con.prepareStatement(
                        "SELECT moduleCode FROM module WHERE courseCode = ?")) {
                    pm.setString(1, courseCode);
                    try (ResultSet rm = pm.executeQuery()) {
                        jComboBoxModule.removeAllItems();
                        while (rm.next()) {
                            jComboBoxModule.addItem(rm.getString("moduleCode"));
                        }
                        if (moduleCode != null) {
                            jComboBoxModule.setSelectedItem(moduleCode);
                        }
                    }
                }
            }

            // 10) show data in text fields and lock the ID
            jTextFieldTeacherID.setEditable(false);
            jTextFieldFName.setText(firstName);
            jTextFieldSurname.setText(surname);
            jTextFieldEmail.setText(email);
            jTextFieldPassword.setText(password);
            jTextFieldPPSN.setText(ppsn);
            jTextFieldDOB.setText(dob);
            jTextFieldAddLine1.setText(add1);
            jTextFieldAddLine2.setText(add2);
            jTextFieldCounty.setText(county);
            jTextFieldEircode.setText(eircode);
            jTextFieldPhoneNumber.setText(phone);

            // 11) allow user to edit the fields
            jTextFieldFName.setEditable(true);
            jTextFieldSurname.setEditable(true);
            jTextFieldEmail.setEditable(true);
            jTextFieldPassword.setEditable(true);
            jTextFieldPPSN.setEditable(true);
            jTextFieldDOB.setEditable(true);
            jTextFieldAddLine1.setEditable(true);
            jTextFieldAddLine2.setEditable(true);
            jTextFieldCounty.setEditable(true);
            jTextFieldEircode.setEditable(true);
            jTextFieldPhoneNumber.setEditable(true);
            jComboBoxCourse.setEnabled(true);
            jComboBoxModule.setEnabled(true);

        } catch (Exception e) {
            // 12) show error if something goes wrong
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        String tidText = jTextFieldTeacherID.getText().trim();
        // if no ID, tell user
        if (tidText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Teacher ID to delete.");
            return;
        }

        try {
            int teacherID = Integer.parseInt(tidText);
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/gtirecords", "root", "root"
            );

            // 1) lookup teacher name, email, login 
            String lookupSql
                    = "SELECT firstName, surname, email, login "
                    + "FROM teacher WHERE teacherID = ?";
            PreparedStatement prest = con.prepareStatement(lookupSql);
            prest.setInt(1, teacherID);
            ResultSet rs = prest.executeQuery();
            // if none found, stop
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this,
                        "No teacher found with ID: " + teacherID);
                rs.close();
                prest.close();
                con.close();
                return;
            }

            // read values directly without creating a Teacher object
            String firstName = rs.getString("firstName");
            String surname = rs.getString("surname");
            String email = rs.getString("email");
            String login = rs.getString("login");
            rs.close();
            prest.close();

            // 2) confirm deletion
            String msg
                    = "Teacher Found:\n"
                    + "Name:  " + firstName + " " + surname + "\n"
                    + "Email: " + email + "\n\n"
                    + "Are you sure you want to delete this teacher?";
            int confirm = JOptionPane.showConfirmDialog(
                    this, msg, "Confirm Deletion", JOptionPane.YES_NO_OPTION
            );
            if (confirm != JOptionPane.YES_OPTION) {
                con.close();
                return; // user said No
            }

            // 3) delete module assignments
            PreparedStatement delMod = con.prepareStatement(
                    "DELETE FROM teacher_module WHERE teacherID = ?"
            );
            delMod.setInt(1, teacherID);
            delMod.executeUpdate();
            delMod.close();

            // 4) delete teacher record
            PreparedStatement delTeach = con.prepareStatement(
                    "DELETE FROM teacher WHERE teacherID = ?"
            );
            delTeach.setInt(1, teacherID);
            int rowsDeleted = delTeach.executeUpdate();
            delTeach.close();

            // 5) if login no longer used, delete it
            if (rowsDeleted > 0) {
                PreparedStatement chk = con.prepareStatement(
                        "SELECT COUNT(*) FROM teacher WHERE login = ?"
                );
                chk.setString(1, login);
                ResultSet rs2 = chk.executeQuery();
                boolean stillUsed = false;
                if (rs2.next() && rs2.getInt(1) > 0) {
                    stillUsed = true;
                }
                rs2.close();
                chk.close();

                if (!stillUsed) {
                    PreparedStatement delLogin = con.prepareStatement(
                            "DELETE FROM login WHERE login = ?"
                    );
                    delLogin.setString(1, login);
                    delLogin.executeUpdate();
                    delLogin.close();
                }
            }

            con.close();

            // 6) if deleted, show success and clear form
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this,
                        "Teacher and their module assignments deleted successfully.");

                jTextFieldTeacherID.setText("");
                jTextFieldFName.setText("");
                jTextFieldSurname.setText("");
                jTextFieldEmail.setText("");
                jTextFieldPassword.setText("");
                jTextFieldPPSN.setText("");
                jTextFieldDOB.setText("");
                jTextFieldAddLine1.setText("");
                jTextFieldAddLine2.setText("");
                jTextFieldCounty.setText("");
                jTextFieldEircode.setText("");
                jTextFieldPhoneNumber.setText("");
                jComboBoxCourse.setSelectedIndex(-1);
                jComboBoxModule.setSelectedIndex(-1);
            } else {
                // if not deleted, show message
                JOptionPane.showMessageDialog(this,
                        "No teacher was deleted (ID not found).");
            }
        } catch (Exception e) {
            // show error if something goes wrong
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed
        int response = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to log out?",
                "Log Out Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        if (response == JOptionPane.YES_OPTION) {
            Login f = new Login();
            f.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_jButtonLogoutActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        if (jButtonAddTeacher.isVisible()) {
            // disable all inputs
            jTextFieldTeacherID.setEditable(true);
            jTextFieldFName.setEditable(false);
            jTextFieldSurname.setEditable(false);
            jTextFieldEmail.setEditable(false);
            jTextFieldPhoneNumber.setEditable(false);
            jTextFieldDOB.setEditable(false);
            jTextFieldAddLine1.setEditable(false);
            jTextFieldAddLine2.setEditable(false);
            jTextFieldPPSN.setEditable(false);
            jTextFieldEircode.setEditable(false);
            jTextFieldCounty.setEditable(false);
            jComboBoxCourse.setEnabled(false);
            jComboBoxModule.setEnabled(false);
            jTextFieldPassword.setEditable(false);

            // hide the Add‐Student button, show the Confirm‐Add button
            jButtonAddTeacher.setVisible(false);
            jButtonConfirm.setVisible(true);
            return;
        }

        jTextFieldTeacherID.setText("");
        jTextFieldFName.setText("");
        jTextFieldSurname.setText("");
        jTextFieldEmail.setText("");
        jTextFieldPhoneNumber.setText("");
        jTextFieldDOB.setText("");
        jTextFieldAddLine1.setText("");
        jTextFieldAddLine2.setText("");
        jTextFieldPPSN.setText("");
        jTextFieldEircode.setText("");
        jTextFieldCounty.setText("");
        jTextFieldPassword.setText("");

        // disable all inputs
        jTextFieldTeacherID.setEditable(true);
        jTextFieldFName.setEditable(false);
        jTextFieldSurname.setEditable(false);
        jTextFieldEmail.setEditable(false);
        jTextFieldPhoneNumber.setEditable(false);
        jTextFieldDOB.setEditable(false);
        jTextFieldAddLine1.setEditable(false);
        jTextFieldAddLine2.setEditable(false);
        jTextFieldPPSN.setEditable(false);
        jTextFieldEircode.setEditable(false);
        jTextFieldCounty.setEditable(false);
        jComboBoxCourse.setEnabled(false);
        jComboBoxModule.setEnabled(false);
        jTextFieldPassword.setEditable(false);

        // ensure Add‐Student is hidden
        jButtonAddTeacher.setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmActionPerformed
        String tidText = jTextFieldTeacherID.getText().trim(); // get the text from the ID field
        // if it’s empty, tell user and stop
        if (tidText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Teacher ID to update.");
            return;
        }

        // convert ID text to number
        int teacherID = Integer.parseInt(tidText);
        // read the new email and password
        String newEmail = jTextFieldEmail.getText().trim();
        String newPassword = jTextFieldPassword.getText().trim();
        // if either is blank, tell user and stop
        if (newEmail.isEmpty() || newPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Email and password cannot be blank.");
            return;
        }

        // open database connection
        try (Connection con = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/gtirecords", "root", "root")) {

            // 1) update all teacher fields except login
            String updT
                    = "UPDATE teacher SET firstName=?, surname=?, email=?, "
                    + "PPSN=?, DOB=?, address1=?, address2=?, County=?, Eircode=?, PhoneNumber=? "
                    + "WHERE teacherID=?";
            try (PreparedStatement pst = con.prepareStatement(updT)) {
                pst.setString(1, jTextFieldFName.getText());
                pst.setString(2, jTextFieldSurname.getText());
                pst.setString(3, newEmail);
                pst.setString(4, jTextFieldPPSN.getText());
                pst.setString(5, jTextFieldDOB.getText());
                pst.setString(6, jTextFieldAddLine1.getText());
                pst.setString(7, jTextFieldAddLine2.getText());
                pst.setString(8, jTextFieldCounty.getText());
                pst.setString(9, jTextFieldEircode.getText());
                pst.setString(10, jTextFieldPhoneNumber.getText());
                pst.setInt(11, teacherID);
                pst.executeUpdate();
            }

            // 2) update the password in login table
            try (PreparedStatement pst = con.prepareStatement(
                    "UPDATE login SET password=?, credentials='T' WHERE login=?")) {
                pst.setString(1, newPassword);
                pst.setString(2, originalTeacherLogin);
                pst.executeUpdate();
            }

            // 3) if email changed, add new login and fix links
            if (!newEmail.equals(originalTeacherLogin)) {
                // a) insert new login row
                try (PreparedStatement pst = con.prepareStatement(
                        "INSERT INTO login (login, password, credentials) VALUES (?, ?, 'T')")) {
                    pst.setString(1, newEmail);
                    pst.setString(2, newPassword);
                    pst.executeUpdate();
                }
                // b) update teacher.login
                try (PreparedStatement pst = con.prepareStatement(
                        "UPDATE teacher SET login=? WHERE teacherID=?")) {
                    pst.setString(1, newEmail);
                    pst.setInt(2, teacherID);
                    pst.executeUpdate();
                }
                // c) update teacher_module.login
                try (PreparedStatement pst = con.prepareStatement(
                        "UPDATE teacher_module SET login=? WHERE teacherID=? AND login=?")) {
                    pst.setString(1, newEmail);
                    pst.setInt(2, teacherID);
                    pst.setString(3, originalTeacherLogin);
                    pst.executeUpdate();
                }
                // d) delete old login if no one uses it
                try (PreparedStatement pst = con.prepareStatement(
                        "DELETE FROM login WHERE login=? "
                        + "AND NOT EXISTS(SELECT 1 FROM teacher WHERE login=?)")) {
                    pst.setString(1, originalTeacherLogin);
                    pst.setString(2, originalTeacherLogin);
                    pst.executeUpdate();
                }
                // update our stored login
                originalTeacherLogin = newEmail;
            }

            // 4) update or insert the module assignment
            String newMod = (String) jComboBoxModule.getSelectedItem();
            if (newMod != null && !newMod.isEmpty()) {
                int updated;
                // try to update existing row
                try (PreparedStatement pst = con.prepareStatement(
                        "UPDATE teacher_module SET moduleCode=? WHERE teacherID=? AND login=?")) {
                    pst.setString(1, newMod);
                    pst.setInt(2, teacherID);
                    pst.setString(3, originalTeacherLogin);
                    updated = pst.executeUpdate();
                }
                // if nothing was updated, insert a new row
                if (updated == 0) {
                    try (PreparedStatement pst = con.prepareStatement(
                            "INSERT INTO teacher_module (teacherID, login, moduleCode) VALUES (?,?,?)")) {
                        pst.setInt(1, teacherID);
                        pst.setString(2, originalTeacherLogin);
                        pst.setString(3, newMod);
                        pst.executeUpdate();
                    }
                }
            }

            // show success message
            JOptionPane.showMessageDialog(this, "Teacher updated successfully.");

            // lock all fields again
            jTextFieldTeacherID.setEditable(true);
            jTextFieldFName.setEditable(false);
            jTextFieldSurname.setEditable(false);
            jTextFieldEmail.setEditable(false);
            jTextFieldPassword.setEditable(false);
            jTextFieldPPSN.setEditable(false);
            jTextFieldDOB.setEditable(false);
            jTextFieldAddLine1.setEditable(false);
            jTextFieldAddLine2.setEditable(false);
            jTextFieldCounty.setEditable(false);
            jTextFieldEircode.setEditable(false);
            jTextFieldPhoneNumber.setEditable(false);
            jComboBoxCourse.setEnabled(false);
            jComboBoxModule.setEnabled(false);
            jButtonAddTeacher.setVisible(false);

        } catch (SQLException e) {
            // if any error happens, show it
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonConfirmActionPerformed

    private void jButtonAddTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddTeacherActionPerformed
        try (Connection con = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/gtirecords", "root", "root")) {

            // 1) get all text from the form
            int teacherID = Integer.parseInt(jTextFieldTeacherID.getText().trim());
            String firstName = jTextFieldFName.getText().trim();
            String surname = jTextFieldSurname.getText().trim();
            String email = jTextFieldEmail.getText().trim();
            String password = jTextFieldPassword.getText().trim();
            String phone = jTextFieldPhoneNumber.getText().trim();
            String dob = jTextFieldDOB.getText().trim();
            String addr1 = jTextFieldAddLine1.getText().trim();
            String addr2 = jTextFieldAddLine2.getText().trim();
            String ppsn = jTextFieldPPSN.getText().trim();
            String eircode = jTextFieldEircode.getText().trim();
            String county = jTextFieldCounty.getText().trim();
            String moduleCode = (String) jComboBoxModule.getSelectedItem();

            // 2) check required fields
            if (firstName.isEmpty() || surname.isEmpty()
                    || email.isEmpty() || password.isEmpty()) {
                JOptionPane.showMessageDialog(
                        this,
                        "First name, surname, email and password are required"
                );
                return;
            }
            // 3) check module
            if (moduleCode == null) {
                JOptionPane.showMessageDialog(
                        this,
                        "Please select a Module to assign this teacher to."
                );
                return;
            }

            // 4) insert into login table
            PreparedStatement p1 = con.prepareStatement(
                    "INSERT INTO login (login, password, credentials) VALUES (?, ?, 'T')"
            );
            p1.setString(1, email);
            p1.setString(2, password);
            p1.executeUpdate();
            p1.close();

            // 5) insert into teacher table
            PreparedStatement p2 = con.prepareStatement(
                    "INSERT INTO teacher "
                    + "(teacherID, firstName, surname, email, PPSN, DOB, address1, address2, County, Eircode, PhoneNumber, login) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            );
            p2.setInt(1, teacherID);
            p2.setString(2, firstName);
            p2.setString(3, surname);
            p2.setString(4, email);
            p2.setString(5, ppsn);
            p2.setString(6, dob);
            p2.setString(7, addr1);
            p2.setString(8, addr2);
            p2.setString(9, county);
            p2.setString(10, eircode);
            p2.setString(11, phone);
            p2.setString(12, email);
            p2.executeUpdate();
            p2.close();

            // 6) insert into teacher_module table
            PreparedStatement p3 = con.prepareStatement(
                    "INSERT INTO teacher_module (teacherID, login, moduleCode) VALUES (?, ?, ?)"
            );
            p3.setInt(1, teacherID);
            p3.setString(2, email);
            p3.setString(3, moduleCode);
            p3.executeUpdate();
            p3.close();

            // 7) show success message
            JOptionPane.showMessageDialog(this, "Teacher added successfully!");

            // 8) clear all form fields
            jTextFieldTeacherID.setText("");
            jTextFieldFName.setText("");
            jTextFieldSurname.setText("");
            jTextFieldEmail.setText("");
            jTextFieldPassword.setText("");
            jTextFieldPhoneNumber.setText("");
            jTextFieldDOB.setText("");
            jTextFieldAddLine1.setText("");
            jTextFieldAddLine2.setText("");
            jTextFieldPPSN.setText("");
            jTextFieldEircode.setText("");
            jTextFieldCounty.setText("");
            jComboBoxCourse.setSelectedIndex(-1);
            jComboBoxModule.setSelectedIndex(-1);

            // 9) disable editing on form
            jTextFieldTeacherID.setEditable(true);
            jTextFieldFName.setEditable(false);
            jTextFieldSurname.setEditable(false);
            jTextFieldEmail.setEditable(false);
            jTextFieldPassword.setEditable(false);
            jTextFieldPhoneNumber.setEditable(false);
            jTextFieldDOB.setEditable(false);
            jTextFieldAddLine1.setEditable(false);
            jTextFieldAddLine2.setEditable(false);
            jTextFieldPPSN.setEditable(false);
            jTextFieldEircode.setEditable(false);
            jTextFieldCounty.setEditable(false);
            jComboBoxCourse.setEnabled(false);
            jComboBoxModule.setEnabled(false);

            // 10) switch buttons back
            jButtonConfirm.setVisible(true);
            jButtonAddTeacher.setVisible(false);

        } catch (Exception e) {
            // 11) show any errors
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonAddTeacherActionPerformed

    private void jTextFieldTeacherIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTeacherIDKeyTyped
        char key = evt.getKeyChar();
        String searchidtext = jTextFieldTeacherID.getText();
        if (!(Character.isDigit(key)) || searchidtext.length() >= 3) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldTeacherIDKeyTyped

    private void jTextFieldFNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldFNameKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isLetter(c) || c == ' ') || jTextFieldFName.getText().length() >= 45) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldFNameKeyTyped

    private void jTextFieldPhoneNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPhoneNumberKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || jTextFieldPhoneNumber.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldPhoneNumberKeyTyped

    private void jTextFieldPPSNKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPPSNKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || jTextFieldPPSN.getText().length() >= 7) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldPPSNKeyTyped

    private void jTextFieldDOBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDOBKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == '-') || jTextFieldDOB.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldDOBKeyTyped

    private void jTextFieldSurnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSurnameKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isLetter(c) || c == ' ') || jTextFieldSurname.getText().length() >= 45) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldSurnameKeyTyped

    private void jTextFieldEircodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldEircodeKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isLetterOrDigit(c) || jTextFieldEircode.getText().length() >= 7) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldEircodeKeyTyped

    private void jTextFieldEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldEmailKeyTyped
        if (jTextFieldEmail.getText().length() >= 45) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldEmailKeyTyped

    private void jTextFieldAddLine1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAddLine1KeyTyped
        if (jTextFieldAddLine1.getText().length() >= 100) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldAddLine1KeyTyped

    private void jTextFieldAddLine2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAddLine2KeyTyped
        if (jTextFieldAddLine2.getText().length() >= 100) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldAddLine2KeyTyped

    private void jTextFieldCountyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCountyKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isLetter(c) || c == ' ') || jTextFieldCounty.getText().length() >= 45) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldCountyKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeacherAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeacherAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeacherAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeacherAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TeacherAdmin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddTeacher;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonConfirm;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JComboBox<String> jComboBoxCourse;
    private javax.swing.JComboBox<String> jComboBoxModule;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelAddLine1;
    private javax.swing.JLabel jLabelAddLine2;
    private javax.swing.JLabel jLabelClassGroup;
    private javax.swing.JLabel jLabelCounty;
    private javax.swing.JLabel jLabelCourse;
    private javax.swing.JLabel jLabelDOB;
    private javax.swing.JLabel jLabelEircode;
    private javax.swing.JLabel jLabelEmail;
    private javax.swing.JLabel jLabelFName;
    private javax.swing.JLabel jLabelPPSN;
    private javax.swing.JLabel jLabelPhoneNumber;
    private javax.swing.JLabel jLabelSurname;
    private javax.swing.JLabel jLabelTeacherID;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldAddLine1;
    private javax.swing.JTextField jTextFieldAddLine2;
    private javax.swing.JTextField jTextFieldCounty;
    private javax.swing.JTextField jTextFieldDOB;
    private javax.swing.JTextField jTextFieldEircode;
    private javax.swing.JTextField jTextFieldEmail;
    private javax.swing.JTextField jTextFieldFName;
    private javax.swing.JTextField jTextFieldPPSN;
    private javax.swing.JTextField jTextFieldPassword;
    private javax.swing.JTextField jTextFieldPhoneNumber;
    private javax.swing.JTextField jTextFieldSurname;
    private javax.swing.JTextField jTextFieldTeacherID;
    // End of variables declaration//GEN-END:variables
}
