/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.FinalProject;

import javax.swing.JOptionPane;
import java.sql.*;

/**
 *
 * @author LiamBrady
 */
public class StudentAdmin extends javax.swing.JFrame {

    /**
     * Creates new form StudentAdmin
     */
    public StudentAdmin() {
        initComponents();
        jTextFieldFName.setEditable(false);
        jTextFieldSurname.setEditable(false);
        jTextFieldEmail.setEditable(false);
        jTextFieldPhoneNumber.setEditable(false);
        jTextFieldDOB.setEditable(false);
        jTextFieldAddLine1.setEditable(false);
        jTextFieldAddLine2.setEditable(false);
        jTextFieldPPSN.setEditable(false);
        jTextFieldEircode.setEditable(false);
        jTextFieldCounty.setEditable(false);
        jComboBoxCourse.setEnabled(false);
        jComboBoxClassGroup.setEnabled(false);
        jButtonAddStudent.setVisible(false);

    }

    private void populateComboBoxes() {
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gtirecords", "root", "root");
            Statement st = con.createStatement();

            ResultSet rsCourse = st.executeQuery("SELECT courseCode FROM course");
            jComboBoxCourse.removeAllItems();
            while (rsCourse.next()) {
                jComboBoxCourse.addItem(rsCourse.getString("courseCode"));
            }

            rsCourse.close();
            st.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading courses: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextFieldSurname = new javax.swing.JTextField();
        jTextFieldEmail = new javax.swing.JTextField();
        jLabelCounty = new javax.swing.JLabel();
        jLabelCourse = new javax.swing.JLabel();
        jTextFieldCounty = new javax.swing.JTextField();
        jComboBoxCourse = new javax.swing.JComboBox<>();
        jLabelAddLine2 = new javax.swing.JLabel();
        jLabelClassGroup = new javax.swing.JLabel();
        jLabelEircode = new javax.swing.JLabel();
        jComboBoxClassGroup = new javax.swing.JComboBox<>();
        jLabelSurname = new javax.swing.JLabel();
        jLabelEmail = new javax.swing.JLabel();
        jTextFieldPhoneNumber = new javax.swing.JTextField();
        jLabelPhoneNumber = new javax.swing.JLabel();
        jLabelAddLine1 = new javax.swing.JLabel();
        jLabelFName = new javax.swing.JLabel();
        jLabelPPSN = new javax.swing.JLabel();
        jLabelDOB = new javax.swing.JLabel();
        jTextFieldDOB = new javax.swing.JTextField();
        jTextFieldEircode = new javax.swing.JTextField();
        jTextFieldPPSN = new javax.swing.JTextField();
        jTextFieldFName = new javax.swing.JTextField();
        jTextFieldAddLine1 = new javax.swing.JTextField();
        jTextFieldAddLine2 = new javax.swing.JTextField();
        jTextFieldStudentID = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonLogout = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButtonConfirm = new javax.swing.JButton();
        jButtonAddStudent = new javax.swing.JButton();
        jLabelStudentID = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student Admin Menu");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTextFieldSurname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSurnameActionPerformed(evt);
            }
        });
        jTextFieldSurname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldSurnameKeyTyped(evt);
            }
        });

        jTextFieldEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldEmailKeyTyped(evt);
            }
        });

        jLabelCounty.setText("County :");

        jLabelCourse.setText("Course :");

        jTextFieldCounty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCountyActionPerformed(evt);
            }
        });
        jTextFieldCounty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldCountyKeyTyped(evt);
            }
        });

        jComboBoxCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course" }));
        jComboBoxCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCourseActionPerformed(evt);
            }
        });

        jLabelAddLine2.setText("Address Line 2 :");

        jLabelClassGroup.setText("Class Group:");

        jLabelEircode.setText("Eircode :");

        jComboBoxClassGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Class Group" }));

        jLabelSurname.setText("Surname :");

        jLabelEmail.setText("Email :");

        jTextFieldPhoneNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPhoneNumberKeyTyped(evt);
            }
        });

        jLabelPhoneNumber.setText("Phone Number :");

        jLabelAddLine1.setText("Address Line 1 :");

        jLabelFName.setText("First Name :");

        jLabelPPSN.setText("PPSN :");

        jLabelDOB.setText("Date of birth :");

        jTextFieldDOB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldDOBKeyTyped(evt);
            }
        });

        jTextFieldEircode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldEircodeActionPerformed(evt);
            }
        });
        jTextFieldEircode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldEircodeKeyTyped(evt);
            }
        });

        jTextFieldPPSN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPPSNKeyTyped(evt);
            }
        });

        jTextFieldFName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldFNameActionPerformed(evt);
            }
        });
        jTextFieldFName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldFNameKeyTyped(evt);
            }
        });

        jTextFieldAddLine1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldAddLine1KeyTyped(evt);
            }
        });

        jTextFieldAddLine2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldAddLine2KeyTyped(evt);
            }
        });

        jTextFieldStudentID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextFieldStudentID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldStudentIDMouseClicked(evt);
            }
        });
        jTextFieldStudentID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldStudentIDKeyTyped(evt);
            }
        });

        jButtonSearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonSearch.setText("SEARCH");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jButtonAdd.setBackground(new java.awt.Color(242, 242, 242));
        jButtonAdd.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonAdd.setText("ADD");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonUpdate.setBackground(new java.awt.Color(242, 242, 242));
        jButtonUpdate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonUpdate.setText("UPDATE");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonDelete.setBackground(new java.awt.Color(242, 242, 242));
        jButtonDelete.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonDelete.setText("DELETE");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonLogout.setBackground(new java.awt.Color(242, 242, 242));
        jButtonLogout.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonLogout.setText("LOGOUT");
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButtonAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonLogout, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        jButtonCancel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonConfirm.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonConfirm.setText("Confirm");
        jButtonConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmActionPerformed(evt);
            }
        });

        jButtonAddStudent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonAddStudent.setText("Add Student");
        jButtonAddStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddStudentActionPerformed(evt);
            }
        });

        jLabelStudentID.setText("Student ID:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelClassGroup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxClassGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelCounty, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCourse, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonAddStudent)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCancel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelPPSN, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelFName, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabelEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelPhoneNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelAddLine1)
                            .addComponent(jLabelAddLine2)
                            .addComponent(jLabelEircode, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStudentID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldStudentID, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldDOB, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldSurname)
                            .addComponent(jTextFieldPPSN)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldCounty, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextFieldFName, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                                        .addComponent(jTextFieldEmail)
                                        .addComponent(jTextFieldPhoneNumber)
                                        .addComponent(jTextFieldAddLine1)
                                        .addComponent(jTextFieldAddLine2)
                                        .addComponent(jTextFieldEircode))
                                    .addComponent(jComboBoxCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSearch)
                    .addComponent(jButtonConfirm))
                .addGap(39, 39, 39))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch)
                    .addComponent(jLabelStudentID))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFName))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSurname))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPPSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPPSN))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDOB))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEmail))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPhoneNumber))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldAddLine1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAddLine1))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldAddLine2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAddLine2))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldEircode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEircode))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCounty)
                    .addComponent(jTextFieldCounty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCourse))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxClassGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelClassGroup))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonConfirm)
                    .addComponent(jButtonAddStudent))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldSurnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSurnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSurnameActionPerformed

    private void jComboBoxCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCourseActionPerformed
        String selectedCourse = (String) jComboBoxCourse.getSelectedItem();
        if (selectedCourse == null) {
            return;
        }

        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gtirecords", "root", "root");
            PreparedStatement pst = con.prepareStatement("SELECT classGroupCode FROM classGroup WHERE courseCode = ?");
            pst.setString(1, selectedCourse);
            ResultSet rs = pst.executeQuery();

            jComboBoxClassGroup.removeAllItems();
            while (rs.next()) {
                jComboBoxClassGroup.addItem(rs.getString("classGroupCode"));
            }

            rs.close();
            pst.close();
            con.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading class groups: " + ex.getMessage());
        }
    }//GEN-LAST:event_jComboBoxCourseActionPerformed

    private void jTextFieldEircodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldEircodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldEircodeActionPerformed

    private void jTextFieldFNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldFNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldFNameActionPerformed

    private void jTextFieldCountyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCountyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCountyActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // 1) get text from the Student ID field
        String studentIDText = jTextFieldStudentID.getText().trim();

        // 2) if it’s empty, show a message and stop
        if (studentIDText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Student ID");
            return;
        }

        try {
            // 3) turn the text into a number
            int studentID = Integer.parseInt(studentIDText);

            // 4) connect to the database
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/gtirecords", "root", "root"
            );

            // 5) build the SQL to find the student and their course info
            String sql = "SELECT s.*, cg.classGroupCode, c.courseCode "
                    + "FROM student s "
                    + "JOIN classGroup cg ON s.classGroupCode = cg.classGroupCode "
                    + "JOIN course c     ON cg.courseCode     = c.courseCode "
                    + "WHERE s.studentID = ?";

            // 6) prepare and run the query
            PreparedStatement prest = con.prepareStatement(sql);
            prest.setInt(1, studentID);
            ResultSet rs = prest.executeQuery();

            // 7) if we found the student
            if (rs.next()) {
                // 7a) Create Student object and populate it
                Student student = new Student();
                student.setStudentID(studentID);
                student.setFirstName(rs.getString("firstName"));
                student.setSurname(rs.getString("surname"));
                student.setCollegeEmail(rs.getString("email"));
                student.setPhoneNumber(rs.getString("phoneNumber"));
                student.setDateOfBirth(rs.getString("DOB"));
                student.setAddressLine1(rs.getString("address1"));
                student.setAddressLine2(rs.getString("address2"));
                student.setPPSN(rs.getString("PPSN"));
                student.setEircode(rs.getString("Eircode"));
                student.setCounty(rs.getString("County"));

                // 7b) Create Course object and populate it
                Course course = new Course();
                course.setCourseId(rs.getString("courseCode"));
                String classGroupCode = rs.getString("classGroupCode");

                // 7c) fill the course dropdown
                Statement st = con.createStatement();
                ResultSet rsCourse = st.executeQuery("SELECT courseCode FROM course");
                jComboBoxCourse.removeAllItems();
                while (rsCourse.next()) {
                    jComboBoxCourse.addItem(rsCourse.getString("courseCode"));
                }

                // 7d) fill the class group dropdown
                ResultSet rsClassGroup = st.executeQuery("SELECT classGroupCode FROM classGroup");
                jComboBoxClassGroup.removeAllItems();
                while (rsClassGroup.next()) {
                    jComboBoxClassGroup.addItem(rsClassGroup.getString("classGroupCode"));
                }

                // 7e) show the student’s info in the text fields
                jTextFieldFName.setText(student.getFirstName());
                jTextFieldSurname.setText(student.getSurname());
                jTextFieldEmail.setText(student.getCollegeEmail());
                jTextFieldPhoneNumber.setText(student.getPhoneNumber());
                jTextFieldDOB.setText(student.getDateOfBirth());
                jTextFieldAddLine1.setText(student.getAddressLine1());
                jTextFieldAddLine2.setText(student.getAddressLine2());
                jTextFieldPPSN.setText(student.getPPSN());
                jTextFieldEircode.setText(student.getEircode());
                jTextFieldCounty.setText(student.getCounty());

                // 7f) set the dropdowns using Course and class group
                jComboBoxCourse.setSelectedItem(course.getCourseId());
                jComboBoxClassGroup.setSelectedItem(classGroupCode);

                // 7g) tell the user we found the student
                JOptionPane.showMessageDialog(this, "Student found");

                // 7h) close the temp result sets and statement
                rsCourse.close();
                rsClassGroup.close();
                st.close();

            } else {
                // 8) if no student, clear all fields
                jTextFieldFName.setText("");
                jTextFieldSurname.setText("");
                jTextFieldEmail.setText("");
                jTextFieldPhoneNumber.setText("");
                jTextFieldDOB.setText("");
                jTextFieldAddLine1.setText("");
                jTextFieldAddLine2.setText("");
                jTextFieldPPSN.setText("");
                jTextFieldEircode.setText("");
                jTextFieldCounty.setText("");
                jComboBoxClassGroup.setSelectedIndex(-1);
                jComboBoxCourse.setSelectedIndex(-1);

                // 8b) tell the user no student was found
                JOptionPane.showMessageDialog(
                        this,
                        "No student found with ID: " + studentID
                );
            }

            // 9) close the main result set, statement, and connection
            rs.close();
            prest.close();
            con.close();

        } catch (Exception e) {
            // 10) if anything goes wrong, show the error message
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed
        int response = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to log out?",
                "Log Out Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        if (response == JOptionPane.YES_OPTION) {
            Login f = new Login();
            f.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_jButtonLogoutActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // 1) read the student ID text
        String studentIDText = jTextFieldStudentID.getText().trim();

        // 2) make sure it is not empty
        if (studentIDText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Student ID");
            return;
        }

        try {
            // 3) convert the text to a number
            int studentID = Integer.parseInt(studentIDText);

            // 4) connect to the database
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/gtirecords", "root", "root"
            );

            // 5) load student info plus class group and course
            String sql = "SELECT student.*, classGroup.classGroupCode, course.courseCode, course.courseName "
                    + "FROM student, classGroup, course "
                    + "WHERE student.classGroupCode = classGroup.classGroupCode "
                    + "  AND classGroup.courseCode = course.courseCode "
                    + "  AND student.studentID = ?";
            PreparedStatement prest = con.prepareStatement(sql);
            prest.setInt(1, studentID);
            ResultSet rs = prest.executeQuery();

            // 6) if no student found, show message and stop
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this,
                        "No student found with ID: " + studentID);
                rs.close();
                prest.close();
                con.close();
                return;
            }

            // 7) Create a Student object and populate it
            Student student = new Student();
            student.setStudentID(studentID);
            student.setFirstName(rs.getString("firstName"));
            student.setSurname(rs.getString("surname"));
            student.setCollegeEmail(rs.getString("email"));
            student.setPhoneNumber(rs.getString("phoneNumber"));
            student.setDateOfBirth(rs.getString("DOB"));
            student.setAddressLine1(rs.getString("address1"));
            student.setAddressLine2(rs.getString("address2"));
            student.setPPSN(rs.getString("PPSN"));
            student.setEircode(rs.getString("Eircode"));
            student.setCounty(rs.getString("County"));
            String courseCode = rs.getString("courseCode");
            String classGrp = rs.getString("classGroupCode");
            String courseName = rs.getString("courseName");

            // 8) ask the user if they want to update
            String msg = "Student Found:\n"
                    + "Name:   " + student.getFirstName() + " " + student.getSurname() + "\n"
                    + "Email:  " + student.getCollegeEmail() + "\n"
                    + "Course: " + courseName
                    + "\n\nDo you want to update this student?";
            int confirm = JOptionPane.showConfirmDialog(
                    this, msg, "Confirm Update", JOptionPane.YES_NO_OPTION
            );
            if (confirm != JOptionPane.YES_OPTION) {
                rs.close();
                prest.close();
                con.close();
                return;
            }

            // 9) fill the course dropdown
            Statement st = con.createStatement();
            ResultSet rsCourse = st.executeQuery("SELECT courseCode FROM course");
            jComboBoxCourse.removeAllItems();
            while (rsCourse.next()) {
                jComboBoxCourse.addItem(rsCourse.getString("courseCode"));
            }
            jComboBoxCourse.setSelectedItem(courseCode);
            rsCourse.close();

            // 10) fill the class group dropdown for that course
            PreparedStatement pstCG = con.prepareStatement(
                    "SELECT classGroupCode FROM classGroup WHERE courseCode = ?"
            );
            pstCG.setString(1, courseCode);
            ResultSet rsCG = pstCG.executeQuery();
            jComboBoxClassGroup.removeAllItems();
            while (rsCG.next()) {
                jComboBoxClassGroup.addItem(rsCG.getString("classGroupCode"));
            }
            jComboBoxClassGroup.setSelectedItem(classGrp);
            rsCG.close();
            pstCG.close();
            st.close();

            // 11) put the data into the text fields using the Student object
            jTextFieldFName.setText(student.getFirstName());
            jTextFieldSurname.setText(student.getSurname());
            jTextFieldEmail.setText(student.getCollegeEmail());
            jTextFieldPhoneNumber.setText(student.getPhoneNumber());
            jTextFieldDOB.setText(student.getDateOfBirth());
            jTextFieldAddLine1.setText(student.getAddressLine1());
            jTextFieldAddLine2.setText(student.getAddressLine2());
            jTextFieldPPSN.setText(student.getPPSN());
            jTextFieldEircode.setText(student.getEircode());
            jTextFieldCounty.setText(student.getCounty());

            // 12) let the user edit the fields now
            jTextFieldFName.setEditable(true);
            jTextFieldSurname.setEditable(true);
            jTextFieldEmail.setEditable(true);
            jTextFieldPhoneNumber.setEditable(true);
            jTextFieldDOB.setEditable(true);
            jTextFieldAddLine1.setEditable(true);
            jTextFieldAddLine2.setEditable(true);
            jTextFieldPPSN.setEditable(true);
            jTextFieldEircode.setEditable(true);
            jTextFieldCounty.setEditable(true);
            jComboBoxCourse.setEnabled(true);
            jComboBoxClassGroup.setEnabled(true);

            // 13) close everything
            rs.close();
            prest.close();
            con.close();

        } catch (Exception e) {
            // 14) show any errors
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // 1) get the ID text
        String studentIDText = jTextFieldStudentID.getText().trim();

        // 2) if empty, show warning and stop
        if (studentIDText.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Please enter a Student ID to delete.");
            return;
        }

        try {
            // 3) convert to number
            int studentID = Integer.parseInt(studentIDText);

            // 4) open database
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/gtirecords", "root", "root"
            );

            // 5) look up the student’s info
            String lookupSql = "SELECT firstName, surname, email FROM student WHERE studentID = ?";
            PreparedStatement prest = con.prepareStatement(lookupSql);
            prest.setInt(1, studentID);
            ResultSet rs = prest.executeQuery();

            // 6) if not found, show message and stop
            if (!rs.next()) {
                JOptionPane.showMessageDialog(
                        this, "No student found with ID: " + studentID);
                rs.close();
                prest.close();
                con.close();
                return;
            }

            // 7) Create Student object and populate it
            Student student = new Student();
            student.setStudentID(studentID);
            student.setFirstName(rs.getString("firstName"));
            student.setSurname(rs.getString("surname"));
            student.setCollegeEmail(rs.getString("email"));

            rs.close();
            prest.close();

            // 8) ask user to confirm delete
            String message = "Student Found:\n"
                    + "Name:  " + student.getFirstName() + " " + student.getSurname() + "\n"
                    + "Email: " + student.getCollegeEmail() + "\n\n"
                    + "Are you sure you want to delete this student?";
            int confirm = JOptionPane.showConfirmDialog(
                    this, message, "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm != JOptionPane.YES_OPTION) {
                con.close();
                return;
            }

            // 9) delete all their assessments first
            PreparedStatement delAssess = con.prepareStatement(
                    "DELETE FROM module_assessment WHERE studentID = ?");
            delAssess.setInt(1, student.getStudentID());
            delAssess.executeUpdate();
            delAssess.close();

            // 10) delete the student record
            PreparedStatement delStudent = con.prepareStatement(
                    "DELETE FROM student WHERE studentID = ?");
            delStudent.setInt(1, student.getStudentID());
            int rowsDeleted = delStudent.executeUpdate();
            delStudent.close();
            con.close();

            // 11) if rowsDeleted > 0, success; else not found
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(
                        this, "Student and all their assessments deleted successfully.");

                // 12) Clear the form fields manually
                jTextFieldStudentID.setText("");
                jTextFieldFName.setText("");
                jTextFieldSurname.setText("");
                jTextFieldEmail.setText("");
                jTextFieldPhoneNumber.setText("");
                jTextFieldDOB.setText("");
                jTextFieldAddLine1.setText("");
                jTextFieldAddLine2.setText("");
                jTextFieldPPSN.setText("");
                jTextFieldEircode.setText("");
                jTextFieldCounty.setText("");
                jComboBoxCourse.setSelectedIndex(-1);
                jComboBoxClassGroup.setSelectedIndex(-1);

            } else {
                JOptionPane.showMessageDialog(
                        this, "No student was deleted (ID not found).");
            }

        } catch (Exception e) {
            // 13) show any error
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        if (jButtonAddStudent.isVisible()) {
            // disable all inputs
            jTextFieldStudentID.setEditable(true);
            jTextFieldFName.setEditable(false);
            jTextFieldSurname.setEditable(false);
            jTextFieldEmail.setEditable(false);
            jTextFieldPhoneNumber.setEditable(false);
            jTextFieldDOB.setEditable(false);
            jTextFieldAddLine1.setEditable(false);
            jTextFieldAddLine2.setEditable(false);
            jTextFieldPPSN.setEditable(false);
            jTextFieldEircode.setEditable(false);
            jTextFieldCounty.setEditable(false);
            jComboBoxCourse.setEnabled(false);
            jComboBoxClassGroup.setEnabled(false);

            // hide the Add‐Student button, show the Confirm‐Add button
            jButtonAddStudent.setVisible(false);
            jButtonConfirm.setVisible(true);
            return;
        }

        // Otherwise we're in Update‐mode → cancel updating
        // clear all inputs
        jTextFieldStudentID.setText("");
        jTextFieldFName.setText("");
        jTextFieldSurname.setText("");
        jTextFieldEmail.setText("");
        jTextFieldPhoneNumber.setText("");
        jTextFieldDOB.setText("");
        jTextFieldAddLine1.setText("");
        jTextFieldAddLine2.setText("");
        jTextFieldPPSN.setText("");
        jTextFieldEircode.setText("");
        jTextFieldCounty.setText("");

        // disable all inputs
        jTextFieldStudentID.setEditable(true);
        jTextFieldFName.setEditable(false);
        jTextFieldSurname.setEditable(false);
        jTextFieldEmail.setEditable(false);
        jTextFieldPhoneNumber.setEditable(false);
        jTextFieldDOB.setEditable(false);
        jTextFieldAddLine1.setEditable(false);
        jTextFieldAddLine2.setEditable(false);
        jTextFieldPPSN.setEditable(false);
        jTextFieldEircode.setEditable(false);
        jTextFieldCounty.setEditable(false);
        jComboBoxCourse.setEnabled(false);
        jComboBoxClassGroup.setEnabled(false);

        // ensure Add‐Student is hidden
        jButtonAddStudent.setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmActionPerformed
        // 1) read the ID from the field
        String studentIDText = jTextFieldStudentID.getText().trim();

        // 2) if it’s empty, show message and stop
        if (studentIDText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Student ID to update.");
            return;
        }

        try {
            // 3) convert the text to a number
            int studentID = Integer.parseInt(studentIDText);

            // 4) open the database
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/gtirecords", "root", "root"
            );

            // 5) find the student’s current course
            String oldCourse = null;
            PreparedStatement pstOld = con.prepareStatement(
                    "SELECT courseCode FROM classGroup, student "
                    + "WHERE student.classGroupCode = classGroup.classGroupCode "
                    + "  AND student.studentID = ?"
            );
            pstOld.setInt(1, studentID);
            ResultSet rsOld = pstOld.executeQuery();
            if (rsOld.next()) {
                oldCourse = rsOld.getString("courseCode");
            }
            rsOld.close();
            pstOld.close();

            // 6) get the course the user picked now
            Course course = new Course();
            course.setCourseId((String) jComboBoxCourse.getSelectedItem());

            // 7) if the course changed, reset their grades
            if (course.getCourseId() != null && !course.getCourseId().equals(oldCourse)) {
                // 7a) delete old grades
                PreparedStatement del = con.prepareStatement(
                        "DELETE FROM module_assessment WHERE studentID = ?"
                );
                del.setInt(1, studentID);
                del.executeUpdate();
                del.close();

                // 7b) get all modules in the new course
                PreparedStatement fetchMods = con.prepareStatement(
                        "SELECT moduleCode FROM module WHERE courseCode = ?"
                );
                fetchMods.setString(1, course.getCourseId());
                ResultSet rsMod = fetchMods.executeQuery();

                // 7c) insert zero for each new module
                PreparedStatement ins = con.prepareStatement(
                        "INSERT INTO module_assessment "
                        + "(moduleCode, assessment_1_marks, assessment_2_marks, exam_marks, studentID) "
                        + "VALUES (?, 0, 0, 0, ?)"
                );
                while (rsMod.next()) {
                    ins.setString(1, rsMod.getString("moduleCode"));
                    ins.setInt(2, studentID);
                    ins.executeUpdate();
                }
                rsMod.close();
                fetchMods.close();
                ins.close();
            }

            // 8) update the student’s own data
            // Create and populate Student object
            Student student = new Student();
            student.setStudentID(studentID);
            student.setFirstName(jTextFieldFName.getText());
            student.setSurname(jTextFieldSurname.getText());
            student.setCollegeEmail(jTextFieldEmail.getText());
            student.setPhoneNumber(jTextFieldPhoneNumber.getText());
            student.setDateOfBirth(jTextFieldDOB.getText());
            student.setAddressLine1(jTextFieldAddLine1.getText());
            student.setAddressLine2(jTextFieldAddLine2.getText());
            student.setPPSN(jTextFieldPPSN.getText());
            student.setEircode(jTextFieldEircode.getText());
            student.setCounty(jTextFieldCounty.getText());
            String classGroupCode = (String) jComboBoxClassGroup.getSelectedItem();

            String upd = "UPDATE student SET "
                    + "firstName=?, surname=?, email=?, phoneNumber=?, "
                    + "DOB=?, address1=?, address2=?, PPSN=?, Eircode=?, County=?, "
                    + "classGroupCode=? "
                    + "WHERE studentID=?";
            PreparedStatement pst = con.prepareStatement(upd);
            pst.setString(1, student.getFirstName());
            pst.setString(2, student.getSurname());
            pst.setString(3, student.getCollegeEmail());
            pst.setString(4, student.getPhoneNumber());
            pst.setString(5, student.getDateOfBirth());
            pst.setString(6, student.getAddressLine1());
            pst.setString(7, student.getAddressLine2());
            pst.setString(8, student.getPPSN());
            pst.setString(9, student.getEircode());
            pst.setString(10, student.getCounty());
            pst.setString(11, classGroupCode);
            pst.setInt(12, student.getStudentID());

            int rows = pst.executeUpdate();
            pst.close();
            con.close();

            // 9) if rows > 0, show success and lock fields
            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Student updated successfully.");
                jTextFieldFName.setEditable(false);
                jTextFieldSurname.setEditable(false);
                jTextFieldEmail.setEditable(false);
                jTextFieldPhoneNumber.setEditable(false);
                jTextFieldDOB.setEditable(false);
                jTextFieldAddLine1.setEditable(false);
                jTextFieldAddLine2.setEditable(false);
                jTextFieldPPSN.setEditable(false);
                jTextFieldEircode.setEditable(false);
                jTextFieldCounty.setEditable(false);
                jComboBoxCourse.setEnabled(false);
                jComboBoxClassGroup.setEnabled(false);
            } else {
                // 10) if no rows, nothing was updated
                JOptionPane.showMessageDialog(this, "No student found with ID: " + studentID);
            }

        } catch (Exception e) {
            // 11) show any error
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonConfirmActionPerformed

    private void jButtonAddStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddStudentActionPerformed
        try {
            // Step 1: Create a Student object and read all values from the form
            Student student = new Student();
            student.setStudentID(Integer.parseInt(jTextFieldStudentID.getText().trim()));
            student.setFirstName(jTextFieldFName.getText().trim());
            student.setSurname(jTextFieldSurname.getText().trim());
            student.setCollegeEmail(jTextFieldEmail.getText().trim());
            student.setPhoneNumber(jTextFieldPhoneNumber.getText().trim());
            student.setDateOfBirth(jTextFieldDOB.getText().trim());
            student.setAddressLine1(jTextFieldAddLine1.getText().trim());
            student.setAddressLine2(jTextFieldAddLine2.getText().trim());
            student.setPPSN(jTextFieldPPSN.getText().trim());
            student.setEircode(jTextFieldEircode.getText().trim());
            student.setCounty(jTextFieldCounty.getText().trim());
            String classGroup = (String) jComboBoxClassGroup.getSelectedItem();

            // Step 2: make sure first name, surname and email are not empty
            if (student.getFirstName().isEmpty() || student.getSurname().isEmpty() || student.getCollegeEmail().isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "First name, surname and email are required");
                return;
            }

            // Step 3: connect to the database
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/gtirecords", "root", "root"
            );

            // Step 4: find the course code for the chosen class group
            Course course = new Course();
            PreparedStatement pstCourse = con.prepareStatement(
                    "SELECT courseCode FROM classGroup WHERE classGroupCode = ?"
            );
            pstCourse.setString(1, classGroup);
            ResultSet rsCourse = pstCourse.executeQuery();
            if (rsCourse.next()) {
                course.setCourseId(rsCourse.getString("courseCode"));
            } else {
                JOptionPane.showMessageDialog(this,
                        "Course not found for class group");
                con.close();
                return;
            }
            rsCourse.close();
            pstCourse.close();

            // Step 5: insert the new student record
            PreparedStatement pstStudent = con.prepareStatement(
                    "INSERT INTO student "
                    + "(studentID, classGroupCode, firstName, surname, email, phoneNumber, "
                    + " DOB, address1, address2, PPSN, Eircode, County) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            );
            pstStudent.setInt(1, student.getStudentID());
            pstStudent.setString(2, classGroup);
            pstStudent.setString(3, student.getFirstName());
            pstStudent.setString(4, student.getSurname());
            pstStudent.setString(5, student.getCollegeEmail());
            pstStudent.setString(6, student.getPhoneNumber());
            pstStudent.setString(7, student.getDateOfBirth());
            pstStudent.setString(8, student.getAddressLine1());
            pstStudent.setString(9, student.getAddressLine2());
            pstStudent.setString(10, student.getPPSN());
            pstStudent.setString(11, student.getEircode());
            pstStudent.setString(12, student.getCounty());
            pstStudent.executeUpdate();
            pstStudent.close();

            // Step 6: for each module in this course, add a zero-grade entry
            PreparedStatement pstModules = con.prepareStatement(
                    "SELECT moduleCode FROM module WHERE courseCode = ?"
            );
            pstModules.setString(1, course.getCourseId());
            ResultSet rsModules = pstModules.executeQuery();
            while (rsModules.next()) {
                String moduleCode = rsModules.getString("moduleCode");
                PreparedStatement pstAssess = con.prepareStatement(
                        "INSERT INTO module_assessment "
                        + "(moduleCode, studentID, assessment_1_marks, assessment_2_marks, exam_marks, award) "
                        + "VALUES (?, ?, 0, 0, 0, NULL)"
                );
                pstAssess.setString(1, moduleCode);
                pstAssess.setInt(2, student.getStudentID());
                pstAssess.executeUpdate();
                pstAssess.close();
            }
            rsModules.close();
            pstModules.close();

            // Step 7: close the database connection
            con.close();

            // Step 8: tell user it worked
            JOptionPane.showMessageDialog(this, "Student added successfully!");

            // Step 9: reset and disable the form
            jTextFieldStudentID.setText("");
            jTextFieldFName.setText("");
            jTextFieldSurname.setText("");
            jTextFieldEmail.setText("");
            jTextFieldPhoneNumber.setText("");
            jTextFieldDOB.setText("");
            jTextFieldAddLine1.setText("");
            jTextFieldAddLine2.setText("");
            jTextFieldPPSN.setText("");
            jTextFieldEircode.setText("");
            jTextFieldCounty.setText("");
            jComboBoxClassGroup.setSelectedIndex(-1);
            jComboBoxCourse.setSelectedIndex(-1);

            jTextFieldFName.setEditable(false);
            jTextFieldSurname.setEditable(false);
            jTextFieldEmail.setEditable(false);
            jTextFieldPhoneNumber.setEditable(false);
            jTextFieldDOB.setEditable(false);
            jTextFieldAddLine1.setEditable(false);
            jTextFieldAddLine2.setEditable(false);
            jTextFieldPPSN.setEditable(false);
            jTextFieldEircode.setEditable(false);
            jTextFieldCounty.setEditable(false);
            jComboBoxCourse.setEnabled(false);
            jComboBoxClassGroup.setEnabled(false);
            jTextFieldStudentID.setEditable(true);
            jButtonAddStudent.setVisible(false);
            jButtonConfirm.setVisible(true);

        } catch (Exception e) {
            // show error if something goes wrong
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonAddStudentActionPerformed

    private void jTextFieldStudentIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldStudentIDMouseClicked

    }//GEN-LAST:event_jTextFieldStudentIDMouseClicked

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // 1) Ask if the user wants to pick their own Student ID
        int choice = JOptionPane.showConfirmDialog(
                this,
                "Do you want to assign a custom Student ID?",
                "Student ID",
                JOptionPane.YES_NO_OPTION
        );

        // Create Student object
        Student student = new Student();

        if (choice == JOptionPane.YES_OPTION) {
            // 1a) They chose to enter a custom ID
            String customID = JOptionPane.showInputDialog(
                    this,
                    "Enter Student ID (1-600):",
                    "Custom ID",
                    JOptionPane.QUESTION_MESSAGE
            );
            try {
                int studentID = Integer.parseInt(customID);
                // 1b) Check the number is in the valid range
                if (studentID < 1 || studentID > 600) {
                    JOptionPane.showMessageDialog(this, "ID must be between 1 and 600");
                    return;  // stop if out of range
                }
                student.setStudentID(studentID); // Set student ID in object
            } catch (Exception e) {
                // 1c) Not a valid number
                JOptionPane.showMessageDialog(this, "Please enter a valid number");
                return;
            }
        } else {
            // 2) Auto‐generate the next ID
            try {
                Connection con = DriverManager.getConnection(
                        "jdbc:mysql://localhost:3306/gtirecords", "root", "root"
                );
                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery(
                        "SELECT MAX(studentID) AS maxID FROM student"
                );
                if (rs.next()) {
                    int studentID = rs.getInt("maxID") + 1;
                    // 2a) Check we did not exceed limit
                    if (studentID > 600) {
                        JOptionPane.showMessageDialog(this, "Maximum ID limit reached");
                        rs.close();
                        stmt.close();
                        con.close();
                        return;
                    }
                    student.setStudentID(studentID); // Set student ID in object
                } else {
                    student.setStudentID(1);  // no students yet
                }
                rs.close();
                stmt.close();
                con.close();
            } catch (Exception e) {
                // 2b) Something went wrong getting the max ID
                JOptionPane.showMessageDialog(this, e.getMessage());
                return;
            }
        }

        // 3) Put the chosen ID into the text field and lock it down
        jTextFieldStudentID.setText(String.valueOf(student.getStudentID()));
        jTextFieldStudentID.setEditable(false);

        // 4) Turn on all the other fields so the user can type
        jTextFieldFName.setEditable(true);
        jTextFieldSurname.setEditable(true);
        jTextFieldEmail.setEditable(true);
        jTextFieldPhoneNumber.setEditable(true);
        jTextFieldDOB.setEditable(true);
        jTextFieldAddLine1.setEditable(true);
        jTextFieldAddLine2.setEditable(true);
        jTextFieldPPSN.setEditable(true);
        jTextFieldEircode.setEditable(true);
        jTextFieldCounty.setEditable(true);
        jComboBoxCourse.setEnabled(true);
        jComboBoxClassGroup.setEnabled(true);

        // Clear all fields
        jTextFieldFName.setText("");
        jTextFieldSurname.setText("");
        jTextFieldEmail.setText("");
        jTextFieldPhoneNumber.setText("");
        jTextFieldDOB.setText("");
        jTextFieldAddLine1.setText("");
        jTextFieldAddLine2.setText("");
        jTextFieldPPSN.setText("");
        jTextFieldEircode.setText("");
        jTextFieldCounty.setText("");

        // 5) Show the Add Student button and hide the Confirm button
        jButtonAddStudent.setVisible(true);
        jButtonConfirm.setVisible(false);

        // 6) Fill the course list (this also sets up class groups)
        populateComboBoxes();

        // 7) Let the user know what to do next
        JOptionPane.showMessageDialog(
                this,
                "Student ID " + student.getStudentID() + " assigned.\n"
                + "Fill in the details and click 'Add Student'."
        );
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jTextFieldFNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldFNameKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isLetter(c) || c == ' ') || jTextFieldFName.getText().length() >= 45) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldFNameKeyTyped

    private void jTextFieldPhoneNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPhoneNumberKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || jTextFieldPhoneNumber.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldPhoneNumberKeyTyped

    private void jTextFieldPPSNKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPPSNKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || jTextFieldPPSN.getText().length() >= 7) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldPPSNKeyTyped

    private void jTextFieldDOBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDOBKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == '-') || jTextFieldDOB.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldDOBKeyTyped

    private void jTextFieldSurnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSurnameKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isLetter(c) || c == ' ') || jTextFieldSurname.getText().length() >= 45) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldSurnameKeyTyped

    private void jTextFieldEircodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldEircodeKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isLetterOrDigit(c) || jTextFieldEircode.getText().length() >= 7) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldEircodeKeyTyped

    private void jTextFieldEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldEmailKeyTyped
        if (jTextFieldEmail.getText().length() >= 45) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldEmailKeyTyped

    private void jTextFieldAddLine1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAddLine1KeyTyped
        if (jTextFieldAddLine1.getText().length() >= 100) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldAddLine1KeyTyped

    private void jTextFieldAddLine2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAddLine2KeyTyped
        if (jTextFieldAddLine2.getText().length() >= 100) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldAddLine2KeyTyped

    private void jTextFieldCountyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCountyKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isLetter(c) || c == ' ') || jTextFieldCounty.getText().length() >= 45) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldCountyKeyTyped

    private void jTextFieldStudentIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldStudentIDKeyTyped
        char key = evt.getKeyChar();
        String searchidtext = jTextFieldStudentID.getText();
        if (!(Character.isDigit(key)) || searchidtext.length() >= 3) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldStudentIDKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentAdmin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddStudent;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonConfirm;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JComboBox<String> jComboBoxClassGroup;
    private javax.swing.JComboBox<String> jComboBoxCourse;
    private javax.swing.JLabel jLabelAddLine1;
    private javax.swing.JLabel jLabelAddLine2;
    private javax.swing.JLabel jLabelClassGroup;
    private javax.swing.JLabel jLabelCounty;
    private javax.swing.JLabel jLabelCourse;
    private javax.swing.JLabel jLabelDOB;
    private javax.swing.JLabel jLabelEircode;
    private javax.swing.JLabel jLabelEmail;
    private javax.swing.JLabel jLabelFName;
    private javax.swing.JLabel jLabelPPSN;
    private javax.swing.JLabel jLabelPhoneNumber;
    private javax.swing.JLabel jLabelStudentID;
    private javax.swing.JLabel jLabelSurname;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldAddLine1;
    private javax.swing.JTextField jTextFieldAddLine2;
    private javax.swing.JTextField jTextFieldCounty;
    private javax.swing.JTextField jTextFieldDOB;
    private javax.swing.JTextField jTextFieldEircode;
    private javax.swing.JTextField jTextFieldEmail;
    private javax.swing.JTextField jTextFieldFName;
    private javax.swing.JTextField jTextFieldPPSN;
    private javax.swing.JTextField jTextFieldPhoneNumber;
    private javax.swing.JTextField jTextFieldStudentID;
    private javax.swing.JTextField jTextFieldSurname;
    // End of variables declaration//GEN-END:variables
}
